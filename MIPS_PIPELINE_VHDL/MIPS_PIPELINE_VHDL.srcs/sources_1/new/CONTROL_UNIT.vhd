library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
USE work.Constants.ALL;

entity CONTROL_UNIT is
Port (  Instruction  : in STD_LOGIC_VECTOR(oplength-1 downto 0);
        RegDst       : out STD_LOGIC;
        RegWrite     : out STD_LOGIC;
        Branch       : out STD_LOGIC;
        Jump         : out STD_LOGIC;
        ALUSrc       : out STD_LOGIC;
        ALUOp        : out STD_LOGIC_VECTOR(2 downto 0);
        MemWrite     : out STD_LOGIC;
        MemtoReg     : out STD_LOGIC;
        MemRead      : out std_logic
);
end CONTROL_UNIT;

architecture Behavioral of CONTROL_UNIT is

begin
process(instruction)
begin
    case instruction is
        when "000-000"=>    RegDst  <='1';	
                            RegWrite<='1';    
                            Branch  <='0';    
                            jump    <='0';    
                            AluSRC  <='0';    
                            Memwrite<='0';    
                            MemtoReg<='0';
                            MemRead <='0';    
                            AluOp   <="000";
        when "000-001"=>    RegDst  <='0';	
                            RegWrite<='1';    
                            Branch  <='0';    
                            jump    <='0';    
                            AluSRC  <='1';    
                            Memwrite<='0';    
                            MemtoReg<='0';
                            MemRead <='0';    
                            AluOp   <="000";
        when "000-010"=>    RegDst  <='0';	
                            RegWrite<='1';    
                            Branch  <='0';    
                            jump    <='0';    
                            AluSRC  <='1';    
                            Memwrite<='0';    
                            MemtoReg<='0';
                            MemRead <='0';    
                            AluOp   <="000";
        when "000-011"=>    RegDst  <='0';	
                            RegWrite<='1';    
                            Branch  <='0';    
                            jump    <='0';    
                            AluSRC  <='1';    
                            Memwrite<='0';    
                            MemtoReg<='1';
                            MemRead <='1';    
                            AluOp   <="001";
        when "000-100"=>    RegDst  <='0';	
                            RegWrite<='1';    
                            Branch  <='0';    
                            jump    <='0';    
                            AluSRC  <='1';    
                            Memwrite<='1';    
                            MemtoReg<='0';
                            MemRead <='0';    
                            AluOp   <="001";
        when "000-101"=>    RegDst  <='1';	
                            RegWrite<='1';    
                            Branch  <='0';    
                            jump    <='0';    
                            AluSRC  <='0';    
                            Memwrite<='0';    
                            MemtoReg<='0';
                            MemRead <='0';    
                            AluOp   <="000";
        when "000-110"=>    RegDst  <='0';	
                            RegWrite<='0';    
                            Branch  <='1';    
                            jump    <='0';
                            MemRead <='0';    
                            AluSRC  <='0';    
                            Memwrite<='0';    
                            MemtoReg<='0';    
                            AluOp   <="010";
        when "000-111"=>    RegDst  <='0';	
                            RegWrite<='0';
                            MemRead <='0';    
                            Branch  <='1';    
                            jump    <='0';    
                            AluSRC  <='0';    
                            Memwrite<='0';    
                            MemtoReg<='0';    
                            AluOp   <="011";
        when "001-000"=>    RegDst  <='0';	
                            RegWrite<='0';    
                            Branch  <='1';
                            MemRead <='0';    
                            jump    <='0';    
                            AluSRC  <='0';    
                            Memwrite<='0';    
                            MemtoReg<='0';    
                            AluOp   <="100";
        when "001-001"=>    RegDst  <='0';	
                            RegWrite<='0';    
                            Branch  <='0';
                            MemRead <='0';    
                            jump    <='1';    
                            AluSRC  <='0';    
                            Memwrite<='0';       
                            MemtoReg<='0';    
                            AluOp   <="000";
        when "001-010"=>    RegDst  <='0';	
                            RegWrite<='0';    
                            Branch  <='0';
                            MemRead <='0';    
                            jump    <='1';    
                            AluSRC  <='0';    
                            Memwrite<='0';    
                            MemtoReg<='0';    
                            AluOp   <="000";
        when others =>      RegDst  <='0';	
                            RegWrite<='0';    
                            Branch  <='0';
                            MemRead <='0';    
                            jump    <='0';    
                            AluSRC  <='0';    
                            Memwrite<='0';    
                            MemtoReg<='0';    
                            AluOp   <="000";
    end case;
end process;

end Behavioral;
